#!/bin/bash -e

#   create-vm - Quickly create guest VMs using cloud image files and cloud-init.

# Set VM_IMAGE_DIR environment variable to override default storage location for VMs
VM_IMAGE_DIR=${VM_IMAGE_DIR:-"/data/libvirt"}

HOSTNAME=
IMG_FQN=
AUTH_KEYS_FQN=
RAM=4096
VCPUS=2
STORAGE=60
BRIDGE=virbr0
ETH=enp3s0
OS=centos-stream10
MAC=
VERBOSE=
ADDR=
GW=192.168.0.1
DNS=192.168.0.1
DNS_SEARCH=

usage()
{
cat << EOF
usage: $0 options

Quickly create guest VMs using cloud image files and cloud-init.

OPTIONS:
   -h      Show this message
   -n      Host name (required)
   -i      Full path and name of the base .img file to use (required)
   -k      Full path and name of the ansible user's public key file (required)
   -r      RAM in MB (defaults to ${RAM})
   -c      Number of VCPUs (defaults to ${VCPUS})
   -s      Amount of storage to allocate in GB (defaults to ${STORAGE})
   -t      Ehernet interface (default enp3s0)
   -o      OS info (default centos-stream10)
   -b      Bridge interface to use (defaults to ${BRIDGE})
   -m      MAC address to use (default is to use a randomly-generated MAC)
   -a      IPv4 address (default 192.168.0.42/24)
   -g      IPv4 gateway (default 192.168.0.1)
   -d      IPv4 domain name servers (default 192.168.0.1)
   -e      DNS search domains
   -x      Exec script URL
   -u      Racnher URL
   -w      Rancher token
   -v      Verbose
EOF
}

while getopts "h:n:i:k:r:c:s:t:o:b:m:a:g:d:e:x:u:w:v" option; do
    case "${option}"
    in
        h)
            usage
            exit 0
            ;;
        n) HOSTNAME=${OPTARG};;
        i) IMG_FQN=${OPTARG};;
        k) AUTH_KEYS_FQN=${OPTARG};;
        r) RAM=${OPTARG};;
        c) VCPUS=${OPTARG};;
        s) STORAGE=${OPTARG};;
        t) ETH=${OPTARG};;
        o) OS=${OPTARG};;
        b) BRIDGE=${OPTARG};;
        m) MAC=${OPTARG};;
        a) ADDR=${OPTARG};;
        g) GW=${OPTARG};;
        d) DNS=${OPTARG};;
        e) DNS_SEARCH=${OPTARG};;
        x) EXEC=${OPTARG};;
        u) RCH=${OPTARG};;
        w) TOKEN=${OPTARG};;
        v) VERBOSE=1;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [[ -z $HOSTNAME ]]; then
    echo "ERROR: Host name is required"
    usage
    exit 1
fi

if [[ -z $IMG_FQN ]]; then
    echo "ERROR: Base cloud image file name is required"
    usage
    exit 1
fi

if [[ -z $AUTH_KEYS_FQN ]]; then
    echo "ERROR: ansible public key file $AUTH_KEYS_FQN not found"
    usage
    exit 1
fi

if ! [[ -f $IMG_FQN ]]; then
    echo "ERROR: $IMG_FQN file not found"
    usage
    exit 1
fi

if [[ -z $ADDR ]]; then
    echo "ERROR: IPv4 address is required"
    usage
    exit 1
fi

if [[ -z $GW ]]; then
    echo "ERROR: IPv4 gateway is required"
    usage
    exit 1
fi

if [[ -z $DNS ]]; then
    echo "ERROR: IPv4 DNS is required"
    usage
    exit 1
fi

if [[ -z $DNS_SEARCH ]]; then
    echo "ERROR: DNS search is required"
    usage
    exit 1
fi

if [[ -z $EXEC ]]; then
    echo "ERROR: EXEC script URL is required"
    usage
    exit 1
fi

if [[ -n $VERBOSE ]]; then
    echo "Building ${HOSTNAME} in $VM_IMAGE_DIR"
    set -xv
fi

mkdir -p "$VM_IMAGE_DIR"/{images,xml,init,base}

echo "Creating a qcow2 image file ${VM_IMAGE_DIR}/images/${HOSTNAME}.qcow2 that uses the cloud image file ${IMG_FQN} as its base"
qemu-img create -b "${IMG_FQN}" -f qcow2 -F qcow2 "${VM_IMAGE_DIR}/images/${HOSTNAME}.qcow2" "${STORAGE}G"

echo "Creating meta-data file $VM_IMAGE_DIR/init/meta-data"
cat > "$VM_IMAGE_DIR/init/meta-data" << EOF
instance-id: ${HOSTNAME}
local-hostname: ${HOSTNAME}
EOF

echo "Creating user-data file $VM_IMAGE_DIR/init/user-data"
cat > "$VM_IMAGE_DIR/init/user-data" << EOF
#cloud-config

write_files:
- content: |
    #!/bin/bash
    set -x

    LOGNAME="runcmd"
    LOGPATH="/root"
    TIMESTAMP="$(date +%Y%m%d_%H%M)"

    echo "runcmd log will be written to \$LOGPATH/\$LOGNAME-\$TIMESTAMP.log"
    exec > "\$LOGPATH/\$LOGNAME-\$TIMESTAMP.log" 2>&1
    /usr/bin/curl -sfL ${EXEC} | TOKEN=$TOKEN RCH=$RCH /bin/bash -x -
  path: /root/runcmd.sh

runcmd:
  - [ /bin/bash, /root/runcmd.sh ]

users:
  - name: ansible
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    groups: sudo,users,admin,wheel
    shell: /bin/bash
    homedir: /home/ansible
    lock_passwd: true
    # plain_text_passwd: password
    ssh_authorized_keys:
EOF

echo "Creating network-config file $VM_IMAGE_DIR/init/network-config"
cat > "$VM_IMAGE_DIR/init/network-config" << EOF
network:
  version: 2
  ethernets:
    ${ETH}:
      addresses: [${ADDR}]
      gateway4: ${GW}
      dhcp4: no
      match:
        macaddress: '${MAC}'
      nameservers:
        addresses: [${DNS}]
        search: [${DNS_SEARCH}]
EOF

echo "Adding keys from the public key file $AUTH_KEYS_FQN to the user-data file"
while IFS= read -r key; do
    echo "      - $key" >> "$VM_IMAGE_DIR/init/user-data"
done < <(grep -v '^ *#' < "$AUTH_KEYS_FQN")

echo "Generating the cidata ISO file $VM_IMAGE_DIR/images/${HOSTNAME}-cidata.iso"
(
    cd "$VM_IMAGE_DIR/init/"
    genisoimage \
        -output "$VM_IMAGE_DIR/images/${HOSTNAME}-cidata.img" \
        -volid cidata \
        -rational-rock \
        -joliet \
        user-data meta-data network-config
)

MACCMD=
if [[ -n $MAC ]]; then
    MACCMD="--mac=${MAC}"
fi

virt-install \
    --name="${HOSTNAME}" \
    --network "network:macvtap,model=virtio" "${MACCMD}" \
    --disk "path=${VM_IMAGE_DIR}/images/${HOSTNAME}.qcow2,format=qcow2,bus=virtio" \
    --disk "path=${VM_IMAGE_DIR}/images/${HOSTNAME}-cidata.img,device=cdrom" \
    --ram="${RAM}" \
    --vcpus="${VCPUS}" \
    --autostart \
    --hvm \
    --arch x86_64 \
    --accelerate \
    --check-cpu \
    --force \
    --osinfo "${OS}" \
    --watchdog=default \
    --graphics vnc \
    --noautoconsole \
    --import
    
#    --debug
#    --osinfo ubuntu24.04 \
#    --osinfo centos-stream10 \
#    --osinfo detect=on,require=off \
#    --network "bridge=${BRIDGE},model=virtio" $MACCMD \
#    --graphics vnc,listen=0.0.0.0 \

# Make a backup of the VM's XML definition file
virsh dumpxml "${HOSTNAME}" > "${VM_IMAGE_DIR}/xml/${HOSTNAME}.xml"

if [[ -n $VERBOSE ]]; then
    set +xv
fi

# Show running VMs
virsh list
